// 01 Introduction to Bit Manipulation

/*
    // BIT MANIPULATION
*/

/*
    // Binary Number System
        0 & 1
*/

// 02 Binary Number System

/*
    // Binary Number System 0 & 1
        Decimal to Binary (4)   Binary to Decimal (100)
*/

// 03 Bitwise Operators

/* 
    // Bit-wise Operators

        Binary AND &
        Binary OR |
        Binary XOR ^
        Binary One's Complement ~
        Binary Left Shift <<
        Binary Right Shift >>
*/

// 04 Binary AND

/*
    // Binary AND &
        Rules   5 & 6   A = 0101    B = 0110
*/

import java.util.*;

public class BitManipulation {
    public static void main(String args[]) {
        System.out.println((5 & 6));
    }
}

// 05 Binary OR

/*
    // Binary OR |
        Rules   5 | 6   A = 0101    B = 0110
*/

import java.util.*;

public class BitManipulation {
    public static void main(String args[]) {
        System.out.println((5 | 6));
    }
}

// 06 Binary XOR

/*
    // Binary XOR ^
        Rules   5 ^ 6   A = 0101    B = 0110
*/

import java.util.*;

public class BitManipulation {
    public static void main(String args[]) {
        System.out.println((5 ^ 6));
    }
}

// 07 Binary 1's Complement

/*
    // Binary One's Complement ~
        Rules   -5  A = 0101
*/

import java.util.*;

public class BitManipulation {
    public static void main(String args[]) {
        System.out.println((~5));
    }
}

// 08 Binary Left Shift 

/*
    // Binary Left Shift <<
        Rules   5<<2    A = 000101
*/

import java.util.*;

public class BitManipulation {
    public static void main(String args[]) {
        System.out.println((5<<2));
    }
}

// 09 Binary Right Shift 

/*
    // Binary Left Shift >>
        Rules   6>>1    A = 000101
*/

import java.util.*;

public class BitManipulation {
    public static void main(String args[]) {
        System.out.println((6>>1));
    }
}

// 10 Get ith Bit

/*
    // Operations
        Get ith bit
        Set ith bit
        Clear ith bit
*/

import java.util.*;

public class BitManipulation {
    public static int getIthBit(int n, int i) {
        int bitMask = 1<<i;
        if((n & bitMask) == 0) {
            return 0;
        } else {
            return 1;
        }
    }
    public static void main(String args[]) {
        System.out.println(getIthBit(10, 2));
    }
}

// 11 Set ith Bit

import java.util.*;

public class BitManipulation {
    public static int setIthBit(int n, int i) {
        int bitMask = 1<<i;
        return n | bitMask;
    }
    public static void main(String args[]) {
        System.out.println(setIthBit(10, 2));
    }
}

// 12 Clear ith Bit 

import java.util.*;

public class BitManipulation {
    public static int clearIthBit(int n, int i) {
        int bitMask = ~(1<<i);
            return n & bitMask;
    }
    public static void main(String args[]) {
        System.out.println(clearIthBit(10, 1));
    }
}

// 13 Update ith Bit

/*
    // Update ith bit
        val = 0 or 1
*/

import java.util.*;

public class BitManipulation {
    public static int UpdateIthBit(int n, int i, int newBit) {
        // if(newBit == 0) {
        //     return clearIthBit(n, i);
        // } else {
        //     return setIthBit(n, i);
        // }

        n = clearIthBit(n, i);
        int BitMask = newBit<<i;
        return n | BitMask;
    }
    public static void main(String args[]) {
        System.out.println(UpdateIthBit(10, 2, 1));
    }
}

// 14 Clear last i bits

/*
    // Clear Last i bits
        n = 1111, i = 2
*/

import java.util.*;

public class BitManipulation {
    public static int clearIBits(int n, int i) {
        int bitMask = ~(0)<<i;
        return n & bitMask;
    }
    public static void main(String args[]) {
        System.out.println(clearIBits(10, 2));
    }
}

// 15 Clear range of bits

/*
    // Clear Range of bits
        n == 100111010011, i=2, j=7
*/

import java.util.*;

public class BitManipulation {
    public static int clearBitsinRange(int n, int i, int j) {
        int a = ((~0)<<(j+1));
        int b = (1<<i)-1;
        int bitMask = a | b;
        return n & bitMask;
    }
    public static void main(String args[]) {
        System.out.println(clearBitsinRange(10, 2, 4));
    }
}
