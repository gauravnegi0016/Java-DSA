// 01 Max Subarray Sum - 1 ( Brute Force )

/*
    // Max Subarray Sum     // Time Complixity O(n^3)
        {1,-2,6,-1,3}
*/

import java.util.*;

public class Arrays {
    public static void maxSubarraySum(int numbers[]) {

        int currSum = 0;
        int maxSum = Integer.MIN_VALUE;

        for(int i=0; i<numbers.length; i++) {
            int start = i;
            for(int j=i; j<numbers.length; j++) {
                int end = j;
                currSum = 0;
                for(int k=start; k<=end; k++) { // Subarray Sum
                    currSum += numbers[k];
                }
                System.out.println(currSum);
                if(maxSum < currSum) {
                    maxSum = currSum;
                }
            }
        }

        System.out.println("max sum = " + maxSum);
    }

    public static void main(String args[]) {
        
        int numbers[] = {1,-2,6,-1,3};
        maxSubarraySum(numbers);
    }
}

// 02 Max Subarray Sum - 2 ( Prefix Sum )

/*
    // Max Subarray Sum     // Time Complixity O(n^3)
        {1,-2,6,-1,3}
    
    // Prefix Array
        {1,-1,5,4,7}
*/

import java.util.*;

public class Arrays {
    public static void maxSubarraySum(int numbers[]) {

        int currSum = 0;
        int maxSum = Integer.MIN_VALUE;
        int prefix[] = new int[numbers.length];

        prefix[0] = numbers[0];
        // Calculate prefix array
        for (int i=1; i<prefix.length; i++) {
            prefix[i]= prefix[i-1] + numbers[i];
        } 

        for(int i=0; i<numbers.length; i++) {
            int start = i;
            for(int j=i; j<numbers.length; j++) {
                int end = j;
                
                currSum = start == 0 ? prefix[end] : prefix[end] - prefix[start-1];
                
                System.out.println(currSum);
                if(maxSum < currSum) {
                    maxSum = currSum;
                }
            }
        }

        System.out.println("max sum = " + maxSum);
    }


    public static void main(String args[]) {
        
        int numbers[] = {1,-2,6,-1,3};
        maxSubarraySum(numbers);
    }
}

// 03 Max Subarray Sum - 3 ( Kadane's Algorithm )

/*
    // Max Subarray Sum
        {-2,-3,4,-1,-2,1,5,-3}
    
    // CS 0 0 4 3 1 2 7 4
    // MS 0 0 4 4 4 4 7 7
*/

import java.util.*;

public class Arrays {
    public static void kadanes(int numbers[]) {

        int ms = Integer.MIN_VALUE;
        int cs = 0;

        for(int i=0; i<numbers.length; i++){
            cs = cs + numbers[i];
            if(cs < 0 ) {
                cs = 0;
            }
            ms = Math.max(cs, ms);
    }

    System.out.println("our max subarray sum is : " + ms);
}

    public static void main(String args[]) {

        int numbers[] = {-2,-3,4,-1,-2,1,5,-3};
        kadanes(numbers);
    }
}

// 04 Trapping Rainwater

/*
    // Trapping Rainwater
        Given a non-negativ integars representing an elevation 
        map where the width of each bar is 1, computer how much 
        water it can trap after raining.

    // height = {4,2,0,6,3,2,5}
*/

// 05 Trapping Rainwater - Code

import java.util.*;

public class ArraysCC {
    public static int trappedRainWater(int height[]) {
    
    int n = height.length;
    // calculate left max boundary - array
    int leftMax[] = new int[n];
    leftMax[0] = height[0];
    for(int i=1; i<n; i++) {
        leftMax[i] = Math.max(height[i], leftMax[i-1]);
    }

    // calculate right max boundary - array
    int rightMax[] = new int[n];
    rightMax[n-1] = height[n-1];
    for(int i=n-2; i>=0; i--) {
        rightMax[i] = Math.max(height[i], rightMax[i+1]);
    }

    int trappedWater = 0;
    // loop
    for(int i=0; i<n; i++) {
        // waterLevel = min(leftmax bound, rightmax bound)
        int waterLevel = Math.min(leftMax[i], rightMax[i]);
        // trapped water = waterLevel - height[i]
        trappedWater += waterLevel - height[i];
    }

    return trappedWater;
    }
    public static void main(String args[]) {
    
        int height[] = {4,2,0,6,3,2,5};
        System.out.println(trappedRainWater(height));
    }
}

// 06 Best Time to Buy & Sell Stock 

/*
    // Buy & Sell Stocks 
        You are given an array prices where prices[i] is the price of a given stock 
        on the ith day. You want to maximize your profut by choosing a single day to 
        buy one stock and choosing a different day in the future to sell that stock.
        Return the maximum profit you can achieve from this transaction. If you 
        cannot achieve any profit,return 0.
    // prices = [7,1,5,3,6,4]

*/

import java.util.*;

public class ArraysCC {
    public static int buyAndSellStocks(int prices[]) {
        int buyPrice = Integer.MAX_VALUE;
        int maxProfit = 0;
        for(int i=0; i<prices.length; i++) {
            if(buyPrice < prices[i]) { // profit 
                int profit = prices[i] - buyPrice; // today's profit
                maxProfit = Math.max(maxProfit, profit);
            } else {
                buyPrice = prices[i];
            }
        }

        return maxProfit;
    }
    public static void main (String args[]) {
        int prices[] = {7,1,5,3,6,4};
    System.out.println(buyAndSellStocks(prices));
    }
}
