// 01 Introduction

/*
    // Definition of an Array 
        Array is a list of elements of the same type
        placed in a contiguous memory locatin 
*/

// 02 Arrays - Creation 

/* 
    // Operations in Arrays 
        * Create
        * Input 
        * Output 
        * Update
 */

/* 
    // Creating an Array 
        dataType arrayName[] = new dataType[size];
        int marks[] = new int[50];
        int number[] = {1,2,3};
        int moreNumber[] = {4,5,6};
        String furits[] = {"apple" , "mengo" , "orange"};
*/

import java.util.*;

public class ArraysCC {  // CC = ClassroomCode
    public static void main(String args[]) {
        
        int marks[] = new int[50];
        int numbers[] = {1,2,3};
        int morenumbers[] = {4,5,6};
        String fruits[] = {"apple", "mengo", "orange"};
    }    
}

// 03 Arrays - Input , Output & Update 

/*
    // Input / Output 
*/

import java.util.*;

public class ArraysCC { 
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        
        // int phy;
        // phy = sc.nextInt();

        int marks[] = new int[100];

        marks[0] = sc.nextInt(); // phys
        marks[1] = sc.nextInt(); // chem
        marks[2] = sc.nextInt(); // math

        System.out.println("phys : " + marks[0]);
        System.out.println("chem : " + marks[1]);
        System.out.println("math : " + marks[2]);
  
        marks[2] = 100; // marks[2] = marks[2] + 1;
        System.out.println("math : " + marks[2]);
  
        int percentage = (marks[0] + marks [1] + marks[2]) / 3;
        System.out.println("percentage =" + percentage + "%");
    }
}   

/*
    // Length of the array 
        int arr[] = new int [5];
        int arrayLength = arr.length;
*/

import java.util.*;

public class ArraysCC { 
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
   
        int marks[] = new int [5];
        
        System.out.println("length of array =" + marks.length);
        
        int marksLength = marks.length;
        System.out.println("length of marksArray =" + marksLength);
    }
}

// 04 Arrays as Function Arguments

/*
    // Passing arrays as argument
*/

import java.util.*;

public class ArraysCC { 
    
    public static void update(int marks[]) {    // Call by reference
        
        for(int i=0; i<marks.length; i++) {
            marks[i] = marks[i] + 1;
        }
    }
    
    public static void main(String args[]) {
        
        int marks[] = {97,98,99};
        update(marks);

        // print our marks 
        for(int i=0; i<marks.length; i++) {
            System.out.print(marks[i]+" ");
        }
        System.out.println();
    } 
}

import java.util.*;

public class ArraysCC { 
    
    public static void nonChangable(int nonChangable) {
        
        nonChangable = 10;
    }

    public static void main(String args[]) {
        
        int nonChangable = 5;
        nonChangable(nonChangable);
        System.out.println(nonChangable);
    }
}

// 05 Linear Search

/*
    // Linear Search    // Time complexity = O(n)
        find the index of element in a given array 
                        Key = 10 
        {2,4,6,8,10,12,14,16}
*/

import java.util.*;

public class ArraysCC { 

    public static int linearSearch(int numbers[], int key) {

        for (int i=0; i<numbers.length; i++) {
            if(numbers[i] == key) {
                return i;
            }
        }
        return -1;
    }

    public static void main(String args[]) {
        
        int numbers[] = {2,4,6,8,10,12,14,16};
        int key = 10;
        
        int index = linearSearch(numbers, key);
        if(index == -1) {
            System.out.println("Not found");
        } else {
            System.out.println("key is at index :" + index);
        }
    }
}

// 06 Largest in Array

/*
    // Largest Number   // Time complexity = O(n)
        Find the largest number in a given array
        {1,2,6,3,5}
*/

/*  
    - infinity = Integer.MIN_VALUE
    + Infinity = integer.MAX_VALUE
*/ 

import java.util.*;
 
public class ArraysCC {

    public static int getLargest(int numbers[]) {

        int largest = Integer.MIN_VALUE;
        int smallest = Integer.MAX_VALUE;

        for(int i=0; i<numbers.length; i++) {
            if(largest < numbers[i]) {
                largest = numbers[i];
            }
            if(smallest > numbers[i]) {
                smallest = numbers[i];
            }
        }
        System.out.println("smallest value is :" + smallest);
        return largest;
    }

    public static void main(String args[]) {
        
        int numbers[] = {1,2,6,3,5};
        System.out.println("Largest value is :" + getLargest(numbers));
    }
}

// 07 Binary Search

/*
    // Binary Search    // Time Complexity = O(log n)
        Prerequisite - Sorted arrays
                        Key = 10
        {2,4,6,8,10,12,14}
*/

/*
    // Pseudo Code 
        start=0 , end=n-1
        while(start <= end)
            find mid
            compare mid & key 
                mid == key Found
                mid > key Left 
                mid < key Right 
*/


// 08 Binary Search Code

import java.util.*;

public class ArraysCC {

    public static int binarySearch(int numbers[], int key) {
        
        int start = 0, end = numbers.length-1;

        while(start <= end) {
            int mid = (start + end) / 2;
            
            // Comparisons
            if(numbers[mid] == key) { // found
                return mid;
            }
            if(numbers[mid] < key) { // right
                start = mid+1;
            } else { // left
                end = mid-1;
            }   
        }

        return -1;
    }

    public static void main(String args[]) {

        int numbers[] = {2,4,6,8,10,12,14};
        int key = 10;

        System.out.println("index for key is :" + binarySearch(numbers, key));
    }
}

// 09 Reverse an Array 

/*
    // Reverse an Array     // Time Complexity = O(n)    // Space complexity = Constant(1)
        {2,4,6,8,10}
*/

import java.util.*;

public class ArraysCC {
    public static void reverse(int numbers[]) {
       
        int first = 0, last = numbers.length-1;

        while(first < last) {
            // Swap
            int temp = numbers[last];
            numbers[last] = numbers[first];
            numbers[first] = temp;
        
            first++;
            last--;
        }
    }

    public static void main (String args[]) {
        
        int numbers[] = {2,4,6,8,10};
        reverse(numbers);
        
        // Print 
        for(int i=0; i<numbers.length; i++) {
            System.out.print(numbers[i]+" ");
        }
        System.out.println();
    }
}

// 10 Pairs in Array 

/*
    // Pairs in an Array    // Time Complexity = O(n^2)
        {2,4,6,8,10}
        (2,4) (2,6) (2,8) (2,10)
        (4,6) (4,8) (4,10)    
        (6,8) (6,10) 
        (8,10)
*/

import java.util.*;

public class ArraysCC {

    public static void printPairs(int numbers[]) {

        int tp = 0; // Total Pairs

        for(int i=0; i<numbers.length; i++) {
            int curr = numbers[i]; //2, 4, 6, 8, 10
            for(int j=i+1; j<numbers.length; j++) {
                System.out.print("(" + curr + "," + numbers[j] + ")");
                tp++;
        }
        System.out.println();
    }
    System.out.println("Total Pairs =" + tp);
}

    public static void main (String args[]) {

        int numbers[] = {2,4,6,8,10};
        printPairs(numbers);
    
    }
}

// 11 Print Subarrays

/*
    // Print Subarray 
        A continuous part of array
        {2,4,6,8,10}
*/

import java.util.*;

public class ArraysCC {

    public static void printSubarrays(int numbers[]) {

        int ts = 0; // Totalo Subarrays
        for(int i=0; i<numbers.length; i++) {
            int start = i;
            for(int j=i; j<numbers.length; j++) {
                int end = j;
                for(int k=start; k<=end; k++) { // Print
                    System.out.print(numbers[k]+" "); // Subarray
                }
                ts++;
                System.out.println();
            }
            System.out.println();
        }

        System.out.println("Total Subarrays = " + ts);
    }

    public static void main (String args[]) {

        int numbers[] = {2,4,6,8,10};
        printSubarrays(numbers);
    }
}
