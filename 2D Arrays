// 01 Introduction to 2D Arrays 

/*
    // 2D ARRAYS 
        MATRIX (ROWS & COLUMNS)      
*/

/*
    // Multi-dimensional Arrays
        
        // 1D
        {1, 2, 3}
        
        // 2D
        {1, 2 ,3}
        {5, 6, 7}
        
        // 3D

*/

// 02 Real life examples

/*
    // Real-life Examples
*/

// 03 Representation of 2D Arrays

/*
    // Representation
*/

// 04 Creation of 2D Arrays

import java.util.*;

public class Matrices {
    public static boolean search(int matrix[] [], int key) {
        for(int i=0; i<matrix.length; i++) {
            for(int j=0; j<matrix[0].length; j++) {
                if(matrix[i][j] == key) {
                    System.out.println("found at cell (" + i + "," + j + ")");
                    return true;
                }
            }
        }
        System.out.println("key not found");
        return false;
    }
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);

        int matrix[] [] = new int[3] [3];
        
        int n=matrix.length, m=matrix[0].length;
        
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
            System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
        search(matrix, 5);
    }
}

// 05 2D Arrays in Memory

/*
    // 2D Arrays in Memory
*/

// 06 Spiral Matrix

/*
    // Spiral Matrix 
        {1, 2, 3, 4}
        {5, 6, 7, 8}
        {9, 10, 11, 12}
        {13, 14, 15, 16}

        // output : 1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10 

        // Approach 
*/

// 07 Spiral Matrix Code

import java.util.*;

public class Matrices {
    public static void printSpiral(int matrix[][]) {
        int startRow = 0;
        int startCol = 0;
        int endRow = matrix.length-1;
        int endCol = matrix[0].length-1;

        while(startRow <= endRow && startCol <= endCol) {
            // top
            for(int j=startCol; j<=endCol; j++) {
                System.out.print(matrix[startRow][j]+" ");
            }
            // right
            for(int i=startRow+1; i<=endRow; i++) {
                System.out.print(matrix[i][endCol]+" ");               
            }
            // bottom
            for(int j=endCol-1; j>=startCol; j--) {
                if(startRow == endRow) {
                    return;
                }
                System.out.print(matrix[endRow][j]+" ");
            }
            // left
            for(int i=endRow-1; i>=startRow+1; i--) {
                if(startCol == endCol) {
                    return;
                }
                System.out.print(matrix[i][startCol]+" ");
            }
            startCol ++;
            startRow ++;
            endCol --;
            endRow --;
        }
        System.out.println();
    }
    public static void main(String args[]) {
        int matrix[][] = {{1, 2, 3, 4},
                          {5, 6, 7, 8},
                          {9, 10, 11, 12},
                          {13, 14, 15, 16}};
        printSpiral(matrix);
        }
}

// 08 Diagonal Sum

/*
    // Diagonal Sum
        n=m
        {1, 2, 3, 4}
        {5, 6, 7, 8}
        {9, 10, 11, 12}
        {13, 14, 15, 16}
       34               34
*/

import java.util.*;

public class Matrices {
    public static int diagonalSum(int matrix[][]) {
        int sum=0;
        
        // for(int i=0; i<matrix.length; i++) {
        //     for(int j=0; j<matrix[0].length; j++) {
        //         if(i==j) {
        //             sum += matrix[i][j];
        //         }
        //         else if(i+j == matrix.length-1) {
        //             sum += matrix[i][j];
        //         }
        //     }
        // }

        for(int i=0; i<matrix.length; i++) {
            // pd
            sum+= matrix[i][i];
            // sd
            if(i != matrix.length-1-i)
                sum += matrix[i][matrix.length-i-1];
        }

        return sum;
    }
    public static void main(String args[]) {
        int matrix[][] = {{1, 2, 3, 4},
                          {5, 6, 7, 8},
                          {9, 10, 11, 12},
                          {13, 14, 15, 16}};
        System.out.println(diagonalSum(matrix));
        }
}

// 09 Search in Sorted Matrix

/*
    // Search in Sorted Matrix
        {10, 20, 30, 40}
        {15, 25, 35, 45}
        {27, 29, 37, 48}
        {32, 33, 39, 50}

        search for a key in row wise &
        col wise sorted matrix

        // Aproach

*/

// 10 Search in Soeted Matrix Code

import java.util.*;

public class Matrices {
    public static boolean staircaseSearch(int matrix[][], int key) {
        int row = 0, col = matrix[0].length-1;

        while(row < matrix.length && col >= 0) {
            if(matrix[row][col] == key) {
                System.out.println("found key at (" + row + "," + col + ")");
                return true;
            }

            else if(key < matrix[row][col]) {
                col--;
            }
            else {
                row++;
            }
        }
        System.out.println("key not found!");
        return false;
    }
    public static void main(String args[]) {
        int matrix[][] = {{10, 20, 30, 40},
                          {15, 25, 35, 45},
                          {27, 29, 37, 48},
                          {32, 33, 39, 50}};
        int key = 33;
        staircaseSearch(matrix, key);
    }
}
